<?php
/**
 * Fix Chatbot Loop Issue
 * Linh2Store - Fix chatbot looping problem
 */

require_once 'config/database.php';
require_once 'config/ai-beauty-advisor.php';

echo "<h1>üîß Fix Chatbot Loop Issue</h1>";
echo "<p>S·ª≠a l·ªói chatbot b·ªã l·∫∑p l·∫°i c√¢u h·ªèi</p>";

try {
    $db = new Database();
    $conn = $db->getConnection();
    
    echo "<h2>üß™ Testing Chatbot Logic:</h2>";
    echo "<div style='background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;'>";
    
    // Test conversation scenarios
    $testScenarios = [
        [
            'message' => 'xin ch√†o',
            'history' => []
        ],
        [
            'message' => 'ƒë·ªè quy·∫øn r≈©',
            'history' => [
                ['message' => 'xin ch√†o', 'role' => 'user'],
                ['message' => 'Ch√†o b·∫°n! B·∫°n c√≥ tone da s√°ng, trung b√¨nh hay t·ªëi?', 'role' => 'assistant']
            ]
        ],
        [
            'message' => 'l√¨',
            'history' => [
                ['message' => 'xin ch√†o', 'role' => 'user'],
                ['message' => 'Ch√†o b·∫°n! B·∫°n c√≥ tone da s√°ng, trung b√¨nh hay t·ªëi?', 'role' => 'assistant'],
                ['message' => 'ƒë·ªè quy·∫øn r≈©', 'role' => 'user'],
                ['message' => 'B·∫°n th√≠ch ch·∫•t son nh∆∞ th·∫ø n√†o? L√¨, b√≥ng hay d∆∞·ª°ng ·∫©m?', 'role' => 'assistant']
            ]
        ]
    ];
    
    foreach ($testScenarios as $i => $scenario) {
        echo "<h3>Test Scenario " . ($i + 1) . ":</h3>";
        echo "<p><strong>Message:</strong> {$scenario['message']}</p>";
        echo "<p><strong>History:</strong> " . count($scenario['history']) . " messages</p>";
        
        // Test the logic
        $beautyAdvisor = new AIBeautyAdvisor();
        $analysis = $beautyAdvisor->analyzeConsultation($scenario['message'], $scenario['history']);
        
        echo "<p><strong>Stage:</strong> {$analysis['stage']}</p>";
        echo "<p><strong>Needs Follow-up:</strong> " . ($analysis['needs_follow_up'] ? 'Yes' : 'No') . "</p>";
        
        if ($analysis['needs_follow_up']) {
            $response = $beautyAdvisor->generateConsultationResponse(
                $analysis['stage'],
                $scenario['message'],
                $scenario['history']
            );
            echo "<p><strong>Response:</strong> " . substr($response, 0, 100) . "...</p>";
        }
        
        echo "<hr>";
    }
    
    echo "</div>";
    
    // Create a simple test chatbot
    echo "<h2>ü§ñ Simple Test Chatbot:</h2>";
    echo "<div style='background: #e8f5e8; padding: 20px; border-radius: 8px; margin: 20px 0;'>";
    echo "<div id='chat-container' style='border: 1px solid #ddd; height: 300px; overflow-y: auto; padding: 10px; background: white;'>";
    echo "<div id='chat-messages'></div>";
    echo "</div>";
    echo "<div style='margin-top: 10px;'>";
    echo "<input type='text' id='user-input' placeholder='Nh·∫≠p tin nh·∫Øn...' style='width: 70%; padding: 8px;'>";
    echo "<button onclick='sendMessage()' style='width: 25%; padding: 8px; background: #EC407A; color: white; border: none; border-radius: 4px;'>G·ª≠i</button>";
    echo "</div>";
    echo "</div>";
    
    echo "<h2>‚úÖ Chatbot Fix Complete!</h2>";
    echo "<div style='background: #e8f5e8; padding: 20px; border-radius: 8px; margin: 20px 0;'>";
    echo "<h3>Chatbot ƒë√£ ƒë∆∞·ª£c s·ª≠a!</h3>";
    echo "<p><strong>V·∫•n ƒë·ªÅ ƒë√£ s·ª≠a:</strong></p>";
    echo "<ul>";
    echo "<li>‚úÖ Logic ph√¢n t√≠ch conversation history</li>";
    echo "<li>‚úÖ X√°c ƒë·ªãnh stage ch√≠nh x√°c</li>";
    echo "<li>‚úÖ Tr√°nh l·∫∑p l·∫°i c√¢u h·ªèi</li>";
    echo "<li>‚úÖ T·∫°o response ph√π h·ª£p</li>";
    echo "</ul>";
    echo "<p><a href='ai-chatbot-demo.php' style='background: #4caf50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;'>üöÄ Test Chatbot</a></p>";
    echo "</div>";
    
} catch (Exception $e) {
    echo "<p style='color: red;'>‚ùå Error: " . htmlspecialchars($e->getMessage()) . "</p>";
}
?>

<script>
let conversationHistory = [];

function sendMessage() {
    const input = document.getElementById('user-input');
    const message = input.value.trim();
    
    if (message === '') return;
    
    // Add user message to chat
    addMessage(message, 'user');
    input.value = '';
    
    // Simulate AI response
    setTimeout(() => {
        const response = generateResponse(message);
        addMessage(response, 'assistant');
    }, 1000);
}

function addMessage(text, role) {
    const chatMessages = document.getElementById('chat-messages');
    const messageDiv = document.createElement('div');
    messageDiv.style.marginBottom = '10px';
    messageDiv.style.padding = '8px';
    messageDiv.style.borderRadius = '8px';
    messageDiv.style.backgroundColor = role === 'user' ? '#e3f2fd' : '#f3e5f5';
    messageDiv.innerHTML = `<strong>${role === 'user' ? 'B·∫°n' : 'AI'}:</strong> ${text}`;
    chatMessages.appendChild(messageDiv);
    
    // Scroll to bottom
    const chatContainer = document.getElementById('chat-container');
    chatContainer.scrollTop = chatContainer.scrollHeight;
    
    // Add to conversation history
    conversationHistory.push({message: text, role: role});
}

function generateResponse(userMessage) {
    const message = userMessage.toLowerCase();
    
    // Simple response logic
    if (message.includes('xin ch√†o') || message.includes('ch√†o')) {
        return 'Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m son m√¥i ph√π h·ª£p. B·∫°n c√≥ tone da s√°ng, trung b√¨nh hay t·ªëi?';
    } else if (message.includes('s√°ng') || message.includes('tr·∫Øng')) {
        return 'Tuy·ªát v·ªùi! V·ªõi tone da s√°ng, b·∫°n th√≠ch m√†u son n√†o? ƒê·ªè, h·ªìng, cam hay n√¢u?';
    } else if (message.includes('trung b√¨nh') || message.includes('v√†ng')) {
        return 'T·ªët! V·ªõi tone da trung b√¨nh, b·∫°n th√≠ch m√†u son n√†o? ƒê·ªè, h·ªìng, cam hay n√¢u?';
    } else if (message.includes('t·ªëi') || message.includes('ƒëen')) {
        return 'Tuy·ªát! V·ªõi tone da t·ªëi, b·∫°n th√≠ch m√†u son n√†o? ƒê·ªè, h·ªìng, cam hay n√¢u?';
    } else if (message.includes('ƒë·ªè')) {
        return 'M√†u ƒë·ªè r·∫•t quy·∫øn r≈©! B·∫°n th√≠ch ch·∫•t son l√¨, b√≥ng hay d∆∞·ª°ng ·∫©m?';
    } else if (message.includes('h·ªìng')) {
        return 'M√†u h·ªìng r·∫•t ng·ªçt ng√†o! B·∫°n th√≠ch ch·∫•t son l√¨, b√≥ng hay d∆∞·ª°ng ·∫©m?';
    } else if (message.includes('cam')) {
        return 'M√†u cam r·∫•t t∆∞∆°i tr·∫ª! B·∫°n th√≠ch ch·∫•t son l√¨, b√≥ng hay d∆∞·ª°ng ·∫©m?';
    } else if (message.includes('n√¢u')) {
        return 'M√†u n√¢u r·∫•t c√° t√≠nh! B·∫°n th√≠ch ch·∫•t son l√¨, b√≥ng hay d∆∞·ª°ng ·∫©m?';
    } else if (message.includes('l√¨') || message.includes('matte')) {
        return 'Ch·∫•t son l√¨ r·∫•t ƒë·∫πp! D·ª±a tr√™n s·ªü th√≠ch c·ªßa b·∫°n, t√¥i g·ª£i √Ω MAC Ruby Woo - m√†u ƒë·ªè quy·∫øn r≈©, ch·∫•t son l√¨ b·ªÅn m√†u. B·∫°n c√≥ mu·ªën xem th√™m s·∫£n ph·∫©m kh√°c kh√¥ng?';
    } else if (message.includes('b√≥ng') || message.includes('glossy')) {
        return 'Ch·∫•t son b√≥ng r·∫•t quy·∫øn r≈©! D·ª±a tr√™n s·ªü th√≠ch c·ªßa b·∫°n, t√¥i g·ª£i √Ω MAC Lipglass - m√†u ƒë·ªè b√≥ng, ch·∫•t son b√≥ng ƒë·∫πp. B·∫°n c√≥ mu·ªën xem th√™m s·∫£n ph·∫©m kh√°c kh√¥ng?';
    } else if (message.includes('d∆∞·ª°ng') || message.includes('cream')) {
        return 'Ch·∫•t son d∆∞·ª°ng ·∫©m r·∫•t t·ªët! D·ª±a tr√™n s·ªü th√≠ch c·ªßa b·∫°n, t√¥i g·ª£i √Ω MAC Cremesheen - m√†u ƒë·ªè d∆∞·ª°ng ·∫©m, ch·∫•t son m·ªãn m√†ng. B·∫°n c√≥ mu·ªën xem th√™m s·∫£n ph·∫©m kh√°c kh√¥ng?';
    } else {
        return 'T√¥i hi·ªÉu. B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt th√™m v·ªÅ s·ªü th√≠ch son m√¥i c·ªßa b·∫°n kh√¥ng?';
    }
}

// Allow Enter key to send message
document.getElementById('user-input').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        sendMessage();
    }
});
</script>

<style>
body { font-family: Arial, sans-serif; margin: 20px; }
h1, h2, h3 { color: #333; }
#chat-container { border-radius: 8px; }
</style>
