<?php
/**
 * AI Chatbot Buttons
 * Linh2Store - Chatbot v·ªõi flow c·ª©ng v√† buttons
 */

require_once __DIR__ . '/database.php';

class AIChatbotButtons {
    private $db;
    
    public function __construct() {
        $this->db = new Database();
    }
    
    /**
     * X·ª≠ l√Ω tin nh·∫Øn
     */
    public function processMessage($userMessage, $conversationId) {
        try {
            // L∆∞u tin nh·∫Øn user
            $this->saveMessage($conversationId, $userMessage, 'user');
            
            // L·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i
            $conversationHistory = $this->getConversationHistory($conversationId);
            
            // Ph√¢n t√≠ch ng·ªØ c·∫£nh v·ªõi flow c·ª©ng
            $context = $this->analyzeButtonContext($userMessage, $conversationHistory);
            
            // T·∫°o ph·∫£n h·ªìi v·ªõi buttons
            $response = $this->generateButtonResponse($context, $userMessage, $conversationHistory);
            
            // L∆∞u ph·∫£n h·ªìi
            $this->saveMessage($conversationId, $response, 'assistant');
            
            return $response;
            
        } catch (Exception $e) {
            return "Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.";
        }
    }
    
    /**
     * Ph√¢n t√≠ch ng·ªØ c·∫£nh v·ªõi flow c·ª©ng
     */
    private function analyzeButtonContext($message, $conversationHistory) {
        $message = strtolower(trim($message));
        
        // Ki·ªÉm tra xem c√≥ ƒëang trong quy tr√¨nh t∆∞ v·∫•n kh√¥ng
        $consultationStage = $this->getCurrentConsultationStage($conversationHistory);
        
        if ($consultationStage) {
            return [
                'type' => 'consultation_continue',
                'stage' => $consultationStage
            ];
        }
        
        // Ki·ªÉm tra c·∫£m x√∫c
        if (strpos($message, 'm·∫Øc') !== false || strpos($message, 'ƒë·∫Øt') !== false) {
            return [
                'type' => 'emotion_handling',
                'stage' => 'address_concern'
            ];
        }
        
        // Ki·ªÉm tra intent
        if (strpos($message, 'son') !== false || strpos($message, 'm√¥i') !== false) {
            return [
                'type' => 'consultation_start',
                'stage' => 'consultation_start'
            ];
        }
        
        if (strpos($message, 'ƒë∆°n h√†ng') !== false || strpos($message, 'tra c·ª©u') !== false) {
            return [
                'type' => 'order_inquiry',
                'stage' => 'order_lookup'
            ];
        }
        
        // Ki·ªÉm tra xem c√≥ ph·∫£i l√† cu·ªôc tr√≤ chuy·ªán m·ªõi kh√¥ng
        if (empty($conversationHistory)) {
            return [
                'type' => 'new_conversation',
                'stage' => 'greeting'
            ];
        }
        
        return [
            'type' => 'general_inquiry',
            'stage' => 'general_response'
        ];
    }
    
    /**
     * T·∫°o ph·∫£n h·ªìi v·ªõi buttons
     */
    private function generateButtonResponse($context, $message, $conversationHistory) {
        switch ($context['type']) {
            case 'consultation_continue':
                return $this->handleConsultationContinue($context['stage'], $message);
                
            case 'emotion_handling':
                return "M√¨nh hi·ªÉu c·∫£m gi√°c c·ªßa b·∫°n m√† üòÖ\n\nSon c·ªßa shop cam k·∫øt ch√≠nh h√£ng, th√†nh ph·∫ßn an to√†n v√† l√™n m√†u c·ª±c chu·∫©n n√™n gi√° th√†nh s·∫Ω t∆∞∆°ng x·ª©ng v·ªõi ch·∫•t l∆∞·ª£ng ·∫°. M√¨nh tin l√† khi d√πng r·ªìi, b·∫°n s·∫Ω th·∫•y r·∫•t ƒë√°ng ti·ªÅn! üíñ\n\nƒê·ªÉ m√¨nh t∆∞ v·∫•n gi√∫p b·∫°n m·ªôt v√†i m√†u son 'x·ª©ng ƒë√°ng' v·ªõi s·ªë ti·ªÅn b·ªè ra nh·∫•t nh√©? B·∫°n th∆∞·ªùng th√≠ch d√πng son cho d·ªãp g√¨ ·∫°?";
                
            case 'consultation_start':
                return "Tuy·ªát v·ªùi! M√¨nh s·∫Ω t∆∞ v·∫•n son m√¥i ph√π h·ª£p cho b·∫°n üíÑ\n\nB·∫°n ƒëang t√¨m ki·∫øm m·ªôt m√†u son cho d·ªãp n√†o ƒë·∫∑c bi·ªát, hay ch·ªâ ƒë·ªÉ s·ª≠ d·ª•ng h√†ng ng√†y th√¥i ·∫°?";
                
            case 'order_inquiry':
                return "ƒê·ªÉ tra c·ª©u ƒë∆°n h√†ng, b·∫°n c·∫ßn cung c·∫•p:\n\n‚Ä¢ M√£ ƒë∆°n h√†ng (n·∫øu c√≥)\n‚Ä¢ S·ªë ƒëi·ªán tho·∫°i ƒë·∫∑t h√†ng\n‚Ä¢ Email ƒë·∫∑t h√†ng\n\nB·∫°n c√≥ th√¥ng tin n√†o trong s·ªë n√†y kh√¥ng ·∫°? üì¶";
                
            case 'new_conversation':
                return "Xin ch√†o! Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Linh2Store üíñ\n\nM√¨nh l√† Linh, tr·ª£ l√Ω ·∫£o c·ªßa shop. M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?\n\n‚Ä¢ T∆∞ v·∫•n son m√¥i ph√π h·ª£p\n‚Ä¢ Tra c·ª©u ƒë∆°n h√†ng\n‚Ä¢ H·ªó tr·ª£ mua s·∫Øm";
                
            default:
                return "M√¨nh c√≥ th·ªÉ gi√∫p b·∫°n:\n\n‚Ä¢ T∆∞ v·∫•n son m√¥i ph√π h·ª£p\n‚Ä¢ Tra c·ª©u ƒë∆°n h√†ng\n‚Ä¢ H·ªó tr·ª£ mua s·∫Øm\n‚Ä¢ Gi·∫£i ƒë√°p th·∫Øc m·∫Øc\n\nB·∫°n c·∫ßn h·ªó tr·ª£ g√¨ ·∫°? üòä";
        }
    }
    
    /**
     * X·ª≠ l√Ω ti·∫øp t·ª•c t∆∞ v·∫•n v·ªõi flow c·ª©ng
     */
    private function handleConsultationContinue($stage, $message) {
        switch ($stage) {
            case 'occasion_inquiry':
                return "Oki, cho nh·ªØng d·ªãp ƒë·∫∑c bi·ªát th√¨ n√™n ch·ªçn m√†u son n·ªïi b·∫≠t m·ªôt ch√∫t! ü•∞ V·∫≠y b·∫°n c√≥ th·ªÉ cho m√¨nh bi·∫øt tone da c·ªßa b·∫°n kh√¥ng ·∫°? (vd: tr·∫Øng, tr·∫Øng h·ªìng, ngƒÉm, ...)";
                
            case 'skin_tone_analysis':
                return "Tuy·ªát v·ªùi! V·ªõi tone da " . $this->extractSkinTone($message) . ", b·∫°n th√≠ch m√†u son nh∆∞ th·∫ø n√†o ·∫°?\n\n‚Ä¢ ƒê·ªè quy·∫øn r≈©\n‚Ä¢ H·ªìng ng·ªçt ng√†o\n‚Ä¢ Cam t∆∞∆°i tr·∫ª\n‚Ä¢ N√¢u ƒë·∫•t c√° t√≠nh";
                
            case 'color_preference':
                return "M√†u " . $this->extractColorPreference($message) . " r·∫•t ƒë·∫πp! B·∫°n th√≠ch ch·∫•t son nh∆∞ th·∫ø n√†o ·∫°?\n\n‚Ä¢ Son L√¨ (Matte) - b·ªÅn m√†u, kh√¥ng b√≥ng\n‚Ä¢ Son c√≥ ƒë·ªô b√≥ng (Glossy) - b√≥ng ƒë·∫πp, quy·∫øn r≈©\n‚Ä¢ Son d∆∞·ª°ng ·∫©m (Creamy) - m·ªãn m√†ng, d∆∞·ª°ng da";
                
            case 'texture_preference':
                return $this->generateProductRecommendation();
                
            default:
                return "M√¨nh ƒëang t∆∞ v·∫•n son m√¥i cho b·∫°n. B·∫°n c√≥ th·ªÉ cho m√¨nh bi·∫øt th√™m th√¥ng tin kh√¥ng ·∫°? üòä";
        }
    }
    
    /**
     * L·∫•y giai ƒëo·∫°n t∆∞ v·∫•n hi·ªán t·∫°i v·ªõi flow c·ª©ng
     */
    private function getCurrentConsultationStage($conversationHistory) {
        if (empty($conversationHistory)) return null;
        
        $hasConsultationStart = false;
        $hasOccasionInfo = false;
        $hasSkinToneInfo = false;
        $hasColorPreference = false;
        $hasTexturePreference = false;
        
        foreach ($conversationHistory as $msg) {
            if (strpos($msg['message'], 't∆∞ v·∫•n') !== false || 
                strpos($msg['message'], 'd·ªãp') !== false) {
                $hasConsultationStart = true;
            }
            
            // Ki·ªÉm tra th√¥ng tin d·ªãp s·ª≠ d·ª•ng - M·ªû R·ªòNG
            if (strpos($msg['message'], 'ƒë·∫∑c bi·ªát') !== false || 
                strpos($msg['message'], 'h√†ng ng√†y') !== false ||
                strpos($msg['message'], '20/10') !== false ||
                strpos($msg['message'], 'd·ªãp') !== false ||
                strpos($msg['message'], 'l·ªÖ') !== false ||
                strpos($msg['message'], 'ti·ªác') !== false ||
                strpos($msg['message'], 'ƒëi ch∆°i') !== false ||
                strpos($msg['message'], 'ƒëi l√†m') !== false) {
                $hasOccasionInfo = true;
            }
            
            if (strpos($msg['message'], 'tone da') !== false || 
                strpos($msg['message'], 'tr·∫Øng') !== false || 
                strpos($msg['message'], 'ngƒÉm') !== false) {
                $hasSkinToneInfo = true;
            }
            
            if (strpos($msg['message'], 'm√†u') !== false || 
                strpos($msg['message'], 'ƒë·ªè') !== false || 
                strpos($msg['message'], 'h·ªìng') !== false) {
                $hasColorPreference = true;
            }
            
            if (strpos($msg['message'], 'ch·∫•t') !== false || 
                strpos($msg['message'], 'l√¨') !== false || 
                strpos($msg['message'], 'b√≥ng') !== false) {
                $hasTexturePreference = true;
            }
        }
        
        if ($hasConsultationStart && !$hasOccasionInfo) {
            return 'occasion_inquiry';
        } elseif ($hasOccasionInfo && !$hasSkinToneInfo) {
            return 'skin_tone_analysis';
        } elseif ($hasSkinToneInfo && !$hasColorPreference) {
            return 'color_preference';
        } elseif ($hasColorPreference && !$hasTexturePreference) {
            return 'texture_preference';
        } elseif ($hasTexturePreference) {
            return 'product_recommendation';
        }
        
        return null;
    }
    
    /**
     * Tr√≠ch xu·∫•t th√¥ng tin
     */
    private function extractSkinTone($message) {
        if (strpos($message, 'tr·∫Øng') !== false) return 'tr·∫Øng';
        if (strpos($message, 'trung t√≠nh') !== false) return 'trung t√≠nh';
        if (strpos($message, 'ngƒÉm') !== false) return 'ngƒÉm';
        return 'tr·∫Øng';
    }
    
    private function extractColorPreference($message) {
        if (strpos($message, 'ƒë·ªè') !== false) return 'ƒë·ªè';
        if (strpos($message, 'h·ªìng') !== false) return 'h·ªìng';
        if (strpos($message, 'cam') !== false) return 'cam';
        if (strpos($message, 'n√¢u') !== false) return 'n√¢u';
        return 'ƒë·ªè';
    }
    
    /**
     * T·∫°o g·ª£i √Ω s·∫£n ph·∫©m
     */
    private function generateProductRecommendation() {
        $recommendations = [];
        $recommendations[] = "D·ª±a tr√™n th√¥ng tin c·ªßa b·∫°n, m√¨nh g·ª£i √Ω:";
        $recommendations[] = "‚Ä¢ MAC Ruby Woo - m√†u ƒë·ªè quy·∫øn r≈©, ch·∫•t son l√¨ b·ªÅn m√†u";
        $recommendations[] = "‚Ä¢ MAC Velvet Teddy - m√†u n√¢u ƒë·∫•t c√° t√≠nh, ch·∫•t son l√¨ sang tr·ªçng";
        $recommendations[] = "‚Ä¢ MAC Chili - m√†u cam ƒë·∫•t t∆∞∆°i tr·∫ª, ch·∫•t son l√¨ nƒÉng ƒë·ªông";
        $recommendations[] = "\nB·∫°n c√≥ mu·ªën xem th√™m s·∫£n ph·∫©m kh√°c kh√¥ng ·∫°? üíÑ";
        
        return implode("\n", $recommendations);
    }
    
    /**
     * L·∫•y l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán
     */
    private function getConversationHistory($conversationId) {
        try {
            $conn = $this->db->getConnection();
            $stmt = $conn->prepare("
                SELECT message, role, created_at 
                FROM ai_chatbot_conversations 
                WHERE conversation_id = ? 
                ORDER BY created_at ASC
            ");
            $stmt->execute([$conversationId]);
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (Exception $e) {
            return [];
        }
    }
    
    /**
     * L∆∞u tin nh·∫Øn
     */
    private function saveMessage($conversationId, $message, $role) {
        try {
            $conn = $this->db->getConnection();
            $stmt = $conn->prepare("
                INSERT INTO ai_chatbot_conversations (conversation_id, message, role, created_at) 
                VALUES (?, ?, ?, NOW())
            ");
            $stmt->execute([$conversationId, $message, $role]);
        } catch (Exception $e) {
            // Ignore database errors
        }
    }
}
?>
